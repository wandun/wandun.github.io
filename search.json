[{"title":"'java文件分割与合并'","url":"http://guokangjie.cn/2019/04/28/java文件分割与合并/","content":"<h1 id=\"分割\"><a href=\"#分割\" class=\"headerlink\" title=\"分割\"></a>分割</h1><p><strong>思想</strong>:</p>\n<blockquote>\n<p>读数据的流不结束，知道读完整个文档，写数据的流写完一个分割文件就关闭，下一个分割文件再打开一个新的。</p>\n</blockquote>\n<p>代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分割后的每个文件大小 这里是 1M</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SIZE = <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 文件分割</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcFile 原始文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path 保存分割后的文件位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">splitFile</span><span class=\"params\">(File srcFile,String path)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(srcFile.length() &lt; <span class=\"number\">0</span> || !srcFile.isFile())&#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"文件内容不正确\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        FileInputStream inputStream =<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            inputStream = <span class=\"keyword\">new</span> FileInputStream(srcFile);</span><br><span class=\"line\">            <span class=\"comment\">// 分割后的文件的数量</span></span><br><span class=\"line\">            <span class=\"keyword\">long</span> chunkFileNum = srcFile.length()%SIZE==<span class=\"number\">0</span>?srcFile.length()/SIZE:srcFile.length()/SIZE+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 每次读取的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"comment\">// 实际读取的大小</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> length = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i&lt;chunkFileNum; i++)&#123;</span><br><span class=\"line\">                File distFile = <span class=\"keyword\">new</span> File(path+i);</span><br><span class=\"line\">                FileOutputStream outputStream = <span class=\"keyword\">new</span> FileOutputStream(distFile);</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((length =inputStream.read(buffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    outputStream.write(buffer);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(distFile.length() &gt;= SIZE)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//关闭写流,进行下一个分块文件</span></span><br><span class=\"line\">                        outputStream.close();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.info(<span class=\"string\">\"分割完成请到&#123;&#125;文件下查看\"</span>,path);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"解析文件错误\"</span>,e);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//关闭读流</span></span><br><span class=\"line\">                inputStream.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h1><p>与分割正好相反<br><strong>思想</strong>:</p>\n<blockquote>\n<p>写数据的流不结束，知道写完整个文档，读数据的流读完一个分割文件就关闭，下一个分割文件再打开一个新的。</p>\n</blockquote>\n<p>代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 文件合并</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path 需要服分割文件的路劲</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> distFileName 合并后文件的名称，请加上后缀名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeFile</span><span class=\"params\">(String path,String distFileName)</span></span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">        File[] listFiles = file.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(listFiles == <span class=\"keyword\">null</span> || listFiles.length ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"文件目录下为空\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        OutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             out =  <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(distFileName));</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;listFiles.length;i++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 每次读取的大小</span></span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                <span class=\"comment\">// 实际读取的大小</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> length = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                InputStream in = <span class=\"keyword\">new</span> FileInputStream(<span class=\"keyword\">new</span> File(path+<span class=\"string\">\"\\\\\"</span>+i));</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((length = in.read(buffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    out.write(buffer,<span class=\"number\">0</span>,length);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                in.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.info(<span class=\"string\">\"文件和并完成,请到&#123;&#125;查看\"</span>,distFileName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                out.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>在上面的分割与合并的方法中我并没有判断路劲中是否包含 <code>\\\\</code>，大家可以自行处理一下!<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyFileUtils utils = <span class=\"keyword\">new</span> MyFileUtils();</span><br><span class=\"line\"><span class=\"comment\">//        utils.splitFile(new File(\"C:\\\\Users\\\\xiaomi\\\\Desktop\\\\GitTemp\\\\temp.ppt\"),</span></span><br><span class=\"line\"><span class=\"comment\">//                \"C:\\\\Users\\\\xiaomi\\\\Desktop\\\\GitTemp\\\\\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">        utils.mergeFile(<span class=\"string\">\"C:\\\\Users\\\\xiaomi\\\\Desktop\\\\GitTemp\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"C:\\\\Users\\\\xiaomi\\\\Desktop\\\\GitTemp\\\\temp2.ppt\"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190428094755426.gif\" alt=\"在这里插入图片描述\"></p>\n","categories":[],"tags":["零零散散","java"]},{"title":"链表实现以及其相关链表操作","url":"http://guokangjie.cn/2019/04/01/链表实现以及其相关链表操作/","content":"<p>﻿<strong>前言：</strong></p>\n<blockquote>\n<p><strong>欢迎各位访问我的个人博客： <a href=\"http://www.guokangjie.cn\" target=\"_blank\" rel=\"noopener\">www.guokangjie.cn</a></strong></p>\n</blockquote>\n<h1 id=\"1、节点定义\"><a href=\"#1、节点定义\" class=\"headerlink\" title=\"1、节点定义\"></a>1、节点定义</h1><blockquote>\n<p>主要分为 两部分：</p>\n<ol>\n<li><strong>下一个节点</strong></li>\n<li><strong>当前节点的数据</strong></li>\n<li><strong>这里没有使用</strong>private<strong>修饰两个属性，是为了之后的使用时不必使用set和get方法来访问</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkNode</span></span>&#123;</span><br><span class=\"line\">    LinkNode next;</span><br><span class=\"line\">    String data;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"LinkNode&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"next=\"</span> + next +</span><br><span class=\"line\">                <span class=\"string\">\", data=\"</span> + data +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"2、定义单链表\"><a href=\"#2、定义单链表\" class=\"headerlink\" title=\"2、定义单链表\"></a>2、定义单链表</h1><h2 id=\"2-1-链表的增加与长度计算\"><a href=\"#2-1-链表的增加与长度计算\" class=\"headerlink\" title=\"2.1 链表的增加与长度计算\"></a>2.1 链表的增加与长度计算</h2><blockquote>\n<ol>\n<li><strong>链表的增加只需要从头节点遍历到尾节点，在未节点添加数据，即可!</strong></li>\n<li><strong>计算链表的长度同理也是如此遍历到最后一个节点，在此过程中记录长度即可</strong></li>\n<li><strong>注意点需要为该类指定唯一的头节点（该节点很重要）</strong></li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.gxm.linkedlist;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> GXM</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/3/31</span></span><br><span class=\"line\"><span class=\"comment\"> * 单链表的实现以及相关基本操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLinkList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 唯一的头节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LinkNode head = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加节点</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@param</span> data  节点数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">       LinkNode newNode = <span class=\"keyword\">new</span> LinkNode();</span><br><span class=\"line\">       newNode.data = data;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">           head = newNode;</span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       LinkNode tmpNode = head;</span><br><span class=\"line\">       <span class=\"keyword\">while</span>( tmpNode.next != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">           tmpNode = tmpNode.next;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       tmpNode.next = newNode;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到链表的长度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">       LinkNode tmpNode = head;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (tmpNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">           size ++ ;</span><br><span class=\"line\">           tmpNode = tmpNode.next;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-链表的删除与输出\"><a href=\"#2-2-链表的删除与输出\" class=\"headerlink\" title=\"2.2 链表的删除与输出\"></a>2.2 链表的删除与输出</h2><blockquote>\n<ol>\n<li><strong>以下方法还是在之前的那个类中编写</strong></li>\n<li><strong>删除指定的数据节点，可以是传入一个节点去删除，也可以传入一个索引下表来删除（这里索引从0开始），都可以，思路都是遍历到该索引所在的位置节点，通过前一个节点指向当前节点的下一个节点，就把当前节点删除了!</strong></li>\n<li><strong>遍历就很简单了，疯狂遍历直到最后一个节点，每次数据节点信息即可!</strong></li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据下表删除指定的链表节点数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 需要删除节点的下表 (从0开始)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 是否成功</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (index &lt;<span class=\"number\">0</span> || index &gt;= length())&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//删除头节点</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           head = head.next;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"comment\">//前一个节点</span></span><br><span class=\"line\">       LinkNode preNode = head;</span><br><span class=\"line\">       <span class=\"comment\">//当前节点</span></span><br><span class=\"line\">       LinkNode curNode = head.next;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (curNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">           <span class=\"comment\">//匹配删除</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span>(i == index)&#123;</span><br><span class=\"line\">               preNode.next = curNode.next;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"comment\">//不匹配继续遍历</span></span><br><span class=\"line\">           preNode = curNode;</span><br><span class=\"line\">           curNode = curNode.next;</span><br><span class=\"line\">           i++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 打印列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        LinkNode tmpNode = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmpNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(tmpNode.data);</span><br><span class=\"line\">            tmpNode = tmpNode.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-链表的排序\"><a href=\"#2-3-链表的排序\" class=\"headerlink\" title=\"2.3 链表的排序\"></a>2.3 链表的排序</h2><blockquote>\n<ol>\n<li><strong>对链表排序(因为我这里节点信息存储的是int 所以直接比较大小 如果不是请按需处理)</strong></li>\n<li><strong>我这里采用冒泡排序的原理（排序方法很多 大家可以自行按需处理</strong>）</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">order</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 第一层循环的节点</span></span><br><span class=\"line\">      LinkNode curNode = head;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (curNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">          <span class=\"comment\">//第二层循环的节点1</span></span><br><span class=\"line\">          LinkNode oneNode = curNode;</span><br><span class=\"line\">          <span class=\"comment\">//第二层循环的节点2</span></span><br><span class=\"line\">          LinkNode twoNode = oneNode.next;</span><br><span class=\"line\">         <span class=\"keyword\">while</span> (twoNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(oneNode.data &gt; twoNode.data)&#123;</span><br><span class=\"line\">                  <span class=\"comment\">// 互换</span></span><br><span class=\"line\">                  <span class=\"keyword\">int</span> data = oneNode.data;</span><br><span class=\"line\">                  oneNode.data = twoNode.data;</span><br><span class=\"line\">                  twoNode.data = data;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">// 继续比较</span></span><br><span class=\"line\">              oneNode = twoNode;</span><br><span class=\"line\">              twoNode = twoNode.next;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">         end++;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(end == length() - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-1-排序举例\"><a href=\"#2-3-1-排序举例\" class=\"headerlink\" title=\"2.3.1 排序举例\"></a>2.3.1 排序举例</h3><blockquote>\n<p><strong>考虑到我排序写的不是很好，所以这里我做一个测试，把之前排序的每一个步骤写出来.测试数据如下</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLinkList myLinkList = <span class=\"keyword\">new</span> MyLinkList();</span><br><span class=\"line\">       myLinkList.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">       myLinkList.add(<span class=\"number\">6</span>);</span><br><span class=\"line\">       myLinkList.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">       myLinkList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">       myLinkList.add(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  第一遍：4 2 1 0 6<br>  第二遍：2 1 0 4 6<br>  第三遍：1 0 2 4 6<br>  第四遍：0 1 2 4 6</p>\n</blockquote>\n<p><strong>还是没有思路，请自行上网查找排序的思路!。。。。。</strong></p>\n<h2 id=\"2-4-删除链表中重复的数据\"><a href=\"#2-4-删除链表中重复的数据\" class=\"headerlink\" title=\"2.4 删除链表中重复的数据\"></a>2.4 删除链表中重复的数据</h2><blockquote>\n<p><strong>第一种思路：大家自然而然的就想到了遍历该链表，比较每一个元素，再去删除，但是时间复杂度会很大</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第二种思路：大家也能想到不能重复的话，map不就可以完成吗，但是增加了空间复杂度</strong></p>\n</blockquote>\n<p><strong>我这里就以第二种方式来做说明</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 删除链表中重复的元素</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteDuplecate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      Hashtable&lt;Integer,Integer&gt; map = <span class=\"keyword\">new</span> Hashtable&lt;Integer,Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">      LinkNode preNode = head;</span><br><span class=\"line\">      LinkNode curNode = head;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (curNode !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(!map.containsKey(curNode.data))&#123;</span><br><span class=\"line\">              <span class=\"comment\">//  key  就是当前值 对于value 这里没有要求所以都可以无所谓</span></span><br><span class=\"line\">              map.put(curNode.data,<span class=\"number\">1</span>);</span><br><span class=\"line\">              <span class=\"comment\">//继续执行判断</span></span><br><span class=\"line\">              preNode = curNode;</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 该节点以存在  删除该重复节点(并且只需要改变前节点的next即可)</span></span><br><span class=\"line\">              preNode.next = curNode.next;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          curNode = curNode.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-5-找出链表中倒数第k个元素\"><a href=\"#2-5-找出链表中倒数第k个元素\" class=\"headerlink\" title=\"2.5 找出链表中倒数第k个元素\"></a>2.5 找出链表中倒数第k个元素</h2><blockquote>\n<p><strong>第一种思路： 得到链表的长度，再遍历到（n-k）个元素的位置不就ok了吗,但是得到链表长度需要遍历一边，再遍历一遍得到倒数第k个元素，这样需要遍历两次链表</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第二种思路：如果从头至尾的方向从链表的某个元素开始，遍历k的元素正好到达链表结尾，那么这个元素就是我们需要的，但是这种方法大家想一下就能知道，在遍历每一个元素的时候，都需要向下遍历k个元素判断是否是末尾元素，其实效率也挺差的。</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第三种思路：设置两个节点索引，两者距离相差k，知道后者到达尾节点，那么前者就是我们需要求得的元素，并且只需要遍历一边。</strong></p>\n</blockquote>\n<p><strong>我这里就以比较好的第三种方式实现</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 找出链表中倒数第k个元素</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> k  倒数第k个元素的下标</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span>   对应的节点</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> LinkNode <span class=\"title\">findReciprocalElem</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接返回头节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k == length())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    LinkNode oneNode = head;</span><br><span class=\"line\">    LinkNode twoNode = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">        twoNode = twoNode.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 长度超出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (twoNode == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//直到 快的节点（twoNode）到达尾节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (twoNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        oneNode = oneNode.next;</span><br><span class=\"line\">        twoNode = twoNode.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oneNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-6-实现链表的反转\"><a href=\"#2-6-实现链表的反转\" class=\"headerlink\" title=\"2.6 实现链表的反转\"></a>2.6 实现链表的反转</h2><blockquote>\n<p><strong>思路：将每一个链表的next的位置改变即可，注意最后需要改变头节点，不然你只是再当前改变，头节点信息没有改变，以后在使用时就会出现问题！（处理方式就是对遍历到的每一个节点分 前、后、以及当前、三个节点记录后再处理）</strong></p>\n</blockquote>\n<p><strong>代码如下：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 反转链表</span></span><br><span class=\"line\"><span class=\"comment\">  * 遍历到的每一个节点分 前、后、以及当前、三个节点记录后再处理</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resverseLinked</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     LinkNode curNode = head;</span><br><span class=\"line\">     LinkNode preNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     LinkNode nextNode;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (curNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         nextNode = curNode.next;</span><br><span class=\"line\">         curNode.next = preNode;</span><br><span class=\"line\">         preNode = curNode;</span><br><span class=\"line\">         curNode = nextNode;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     head = preNode;  <span class=\"comment\">//不要忘了改变头节点</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-7-从尾到头输出单链表\"><a href=\"#2-7-从尾到头输出单链表\" class=\"headerlink\" title=\"2.7 从尾到头输出单链表\"></a>2.7 从尾到头输出单链表</h2><blockquote>\n<p><strong>第一种方式：相信大家能想到，反转链表后输出，但是遍历次数较多</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>第二种方式：使用递归，输出尾节点后再输出前面的节点</strong></p>\n</blockquote>\n<p><strong>我这里就写第二种方式：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 从尾到头输出单链表,使用递归的方式</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resverseToPrint</span><span class=\"params\">(LinkNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//到达尾节点输出</span></span><br><span class=\"line\">        System.out.println(node.data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//没有到达尾节点，继续递归</span></span><br><span class=\"line\">        resverseToPrint(node.next);</span><br><span class=\"line\">        <span class=\"comment\">// 上一次的结果以输出，可以输出这次的了</span></span><br><span class=\"line\">        System.out.println(node.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>因为该方法需要传入一个头节点，所以测试代码我这里给一下:</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkNode head = <span class=\"keyword\">new</span> LinkNode();</span><br><span class=\"line\">       head.data = <span class=\"number\">1</span>;</span><br><span class=\"line\">       LinkNode sec = <span class=\"keyword\">new</span> LinkNode();</span><br><span class=\"line\">       sec.data = <span class=\"number\">2</span>;</span><br><span class=\"line\">       LinkNode thr = <span class=\"keyword\">new</span> LinkNode();</span><br><span class=\"line\">       thr.data = <span class=\"number\">3</span>;</span><br><span class=\"line\">       LinkNode fou = <span class=\"keyword\">new</span> LinkNode();</span><br><span class=\"line\">       fou.data = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       head.next = sec;</span><br><span class=\"line\">       sec.next = thr;</span><br><span class=\"line\">       thr.next = fou;</span><br><span class=\"line\"></span><br><span class=\"line\">       myLinkList.resverseToPrint(head);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-8-寻找单链表中的中间节点\"><a href=\"#2-8-寻找单链表中的中间节点\" class=\"headerlink\" title=\"2.8 寻找单链表中的中间节点\"></a>2.8 寻找单链表中的中间节点</h2><blockquote>\n<p><strong>第一种方式：先遍历得到链表长度，在根据长度判断遍历到中间节点</strong><br><strong>第二种方式:  设置连个节点，但twoNode的速度是oneOnde遍历速度的一倍</strong></p>\n</blockquote>\n<p><strong>说明如下：</strong><br><img src=\"https://img-blog.csdnimg.cn/20190401172014575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjYzMDgz,size_16,color_FFFFFF,t_70\" alt=\"描述\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  *  寻找单链表中的中间节点</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> LinkNode[] searchMidNode()&#123;</span><br><span class=\"line\">    LinkNode []result = <span class=\"keyword\">new</span> LinkNode[<span class=\"number\">2</span>];</span><br><span class=\"line\">    LinkNode oneNode = head;</span><br><span class=\"line\">    LinkNode twoNode = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (oneNode != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(twoNode.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            result[<span class=\"number\">0</span>] = oneNode;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (twoNode.next.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 其实这里还有  oneNode.next</span></span><br><span class=\"line\">            result[<span class=\"number\">0</span>] = oneNode;</span><br><span class=\"line\">            result[<span class=\"number\">1</span>] = oneNode.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        oneNode = oneNode.next;</span><br><span class=\"line\">        twoNode = twoNode.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><blockquote>\n<p>1 . <strong>以上是部分链表的操作，关于代码的测试，我仅仅是测试了一遍，如果有错误，希望各位可以指出，非常感谢!!</strong><br>2 . <strong>部分代码的逻辑判断不是很严谨只是考虑了大多数情况！并没有做出很好的判断</strong></p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20190331160530579.jpg\" alt></p>\n","categories":["数据结构与算法","java"],"tags":["java","数据结构与算法"]},{"title":"使用百度api与opencv完成图片人脸检测并显示","url":"http://guokangjie.cn/2019/03/17/使用百度api与oenpcv完成图片人脸检测并显示/","content":"<p>﻿# 前言**：</p>\n<ul>\n<li>最近花了点时间搭建了一个个人博客，hh！  还是挺开心的！欢迎各位访问<br><a href=\"http://www.guokangjie.cn\" target=\"_blank\" rel=\"noopener\">www.guokangjie.cn</a></li>\n<li>其实快大二的时候，我就学了一部分opencv。但那时自己实在是太菜!! hh<br><img src=\"https://img-blog.csdnimg.cn/20190317174647653.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjYzMDgz,size_16,color_FFFFFF,t_70\" alt=\"无奈\"><br>最近看到bi站一个可爱的女博主的视频，使用python和opencv画出非常奈斯的图片，我知道必须使用一波opencv了  哈哈！！（地址: <a href=\"https://www.bilibili.com/video/av20349733?p=2\" target=\"_blank\" rel=\"noopener\">点击跳转</a>）<br>关于语言的使用,呃呃，选择使用一下当下上升趋势最快的 python 感受一下hh</li>\n</ul>\n<hr>\n<h1 id=\"言归正传\"><a href=\"#言归正传\" class=\"headerlink\" title=\"言归正传:\"></a><strong>言归正传</strong>:</h1><p>其实关于opencv自己本身就可以做出人脸识别了，但是这里先不说，使用一下百度提供的免费人脸检测API 地址：<a href=\"https://login.bce.baidu.com/?account=&amp;redirect=https://console.bce.baidu.com/ai/?fromai=1\" target=\"_blank\" rel=\"noopener\">点击跳转</a>，免费的，直接注册，再申请一个应用即可</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>下载sdk  我这里下载的是python的 ，地址:<a href=\"https://ai.baidu.com/sdk#bfr\" target=\"_blank\" rel=\"noopener\">点击跳转</a><br>下完以后配置相关参数，在根据返回的参数完成图片展示即可 ，先看效果<br><img src=\"https://img-blog.csdnimg.cn/20190317175526954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjYzMDgz,size_16,color_FFFFFF,t_70\" alt=\"效果图\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2 <span class=\"keyword\">as</span> cv</span><br><span class=\"line\"><span class=\"keyword\">from</span> aip <span class=\"keyword\">import</span> AipFace</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 你的 APPID AK SK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_api_client</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    APP_ID = <span class=\"string\">'你的 App ID'</span></span><br><span class=\"line\">    API_KEY = <span class=\"string\">'你的 Api Key'</span></span><br><span class=\"line\">    SECRET_KEY = <span class=\"string\">'你的 Secret Ke'</span></span><br><span class=\"line\">    client = AipFace(APP_ID, API_KEY, SECRET_KEY)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> client</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将图片转为base64编码格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">img2base64</span><span class=\"params\">(path: str)</span>:</span></span><br><span class=\"line\">    f = open(path, <span class=\"string\">'rb'</span>)</span><br><span class=\"line\">    image = base64.b64encode(f.read())</span><br><span class=\"line\">    image64 = str(image, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> image64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_image</span><span class=\"params\">(face_list, path: str)</span>:</span></span><br><span class=\"line\">    left = int(face_list[<span class=\"number\">0</span>][<span class=\"string\">'location'</span>][<span class=\"string\">'left'</span>])</span><br><span class=\"line\">    top = int(face_list[<span class=\"number\">0</span>][<span class=\"string\">'location'</span>][<span class=\"string\">'top'</span>])</span><br><span class=\"line\">    width = int(face_list[<span class=\"number\">0</span>][<span class=\"string\">'location'</span>][<span class=\"string\">'width'</span>])</span><br><span class=\"line\">    height = int(face_list[<span class=\"number\">0</span>][<span class=\"string\">'location'</span>][<span class=\"string\">'height'</span>])</span><br><span class=\"line\">    img = cv.imread(path)                                  <span class=\"comment\"># 426 71 98 85  height = 400  640</span></span><br><span class=\"line\">    print(<span class=\"string\">\"%d %d %d %d %d %d\"</span> % (left, top, width, height, img.shape[<span class=\"number\">0</span>], img.shape[<span class=\"number\">1</span>]))</span><br><span class=\"line\">    cv.rectangle(img, (left, top), (left+width, top+height), (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">3</span>)</span><br><span class=\"line\">    cv.imshow(<span class=\"string\">\"check face\"</span>, img)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果有可选参数</span></span><br><span class=\"line\">options = &#123;&#125;</span><br><span class=\"line\">options[<span class=\"string\">\"face_field\"</span>] = <span class=\"string\">\"age\"</span></span><br><span class=\"line\">options[<span class=\"string\">\"max_face_num\"</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">options[<span class=\"string\">\"face_type\"</span>] = <span class=\"string\">\"LIVE\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">image_type = <span class=\"string\">\"BASE64\"</span></span><br><span class=\"line\">client = get_api_client()</span><br><span class=\"line\">image64 = img2base64(<span class=\"string\">'image/002.jpg'</span>)</span><br><span class=\"line\">res = client.detect(image64, image_type, options)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> res[<span class=\"string\">'error_code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">    face_list = res[<span class=\"string\">'result'</span>][<span class=\"string\">'face_list'</span>]</span><br><span class=\"line\">    show_image(face_list,<span class=\"string\">'image/002.jpg'</span>)</span><br><span class=\"line\">    cv.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\">    cv.destroyAllWindows()</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"调用api失败\"</span>)</span><br></pre></td></tr></table></figure>\n<p>写到这里我不禁感叹一句<strong>API</strong>大法好！！！  过几天下次博客使用opencv完成该部分工作</p>\n","categories":["python","opencv"],"tags":["python","opencv"]},{"title":"属于自己的个人博客","url":"http://guokangjie.cn/2019/03/15/使用hexo搭建个人博客/","content":"<h1 id=\"闲聊\"><a href=\"#闲聊\" class=\"headerlink\" title=\"闲聊\"></a>闲聊</h1><p>最近一直希望自己能 弄一个属于自己的个人博客！但是也不想自己买一个服务器搭建一个，除了能了解一下项目的部署，搭建一个博客实在没有必要，毕竟现在博客网站实在太多了，而且自己买一个服务器实在不划算！嗯，好吧平穷使我正直！！hhh</p>\n<p><img src=\"/images/temp/2.jpeg\" alt=\"无奈\"></p>\n","categories":["零零散散"],"tags":["零零散散"]},{"title":"about","url":"http://guokangjie.cn/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://guokangjie.cn/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://guokangjie.cn/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://guokangjie.cn/project/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://guokangjie.cn/tag/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://guokangjie.cn/search/index.html","content":"","categories":[],"tags":[]}]